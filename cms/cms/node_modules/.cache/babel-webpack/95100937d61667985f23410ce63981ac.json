{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let MessageService = /*#__PURE__*/(() => {\n  class MessageService {\n    constructor(http) {\n      this.messages = [];\n      this.messageChangedEvent = new EventEmitter();\n      this.http = http;\n    }\n\n    getMessages() {\n      this.http.get('https://angular-nov21-default-rtdb.firebaseio.com/messages.json').subscribe( // success method\n      messages => {\n        this.messages = messages;\n        this.maxMessageId = this.getMaxId();\n        let sortingMsgs = this.messages.slice;\n        this.messages.sort(function (a, b) {\n          return sortingMsgs[a.id] - sortingMsgs[b.id];\n        });\n        this.messageChangedEvent.next(this.messages.slice());\n      }, error => {\n        console.log(error.message);\n      });\n      return this.messages.slice();\n    }\n\n    getMessage(id) {\n      let messages = this.getMessages();\n\n      for (let message in messages) {\n        if (messages[message].id == id) {\n          return messages[message];\n        }\n      }\n\n      return null;\n    }\n\n    addMessage(message) {\n      this.messages.push(message);\n      this.storeMessages();\n      this.messageChangedEvent.emit(this.messages.slice());\n    }\n\n    getMaxId() {\n      let maxId = 0;\n\n      for (let message in this.messages) {\n        let currentId = Number(this.messages[message].id);\n\n        if (currentId > maxId) {\n          maxId = currentId;\n          break;\n        }\n      }\n\n      return maxId;\n    }\n\n    storeMessages() {\n      let messages = JSON.stringify(this.messages);\n      this.http.put('https://angular-nov21-default-rtdb.firebaseio.com/messages.json', messages, {\n        headers: new HttpHeaders({\n          \"content-type\": \"application/json\"\n        })\n      }).subscribe(success => {\n        this.messageChangedEvent.emit(success);\n      });\n    }\n\n  }\n\n  MessageService.ɵfac = function MessageService_Factory(t) {\n    return new (t || MessageService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  MessageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MessageService,\n    factory: MessageService.ɵfac\n  });\n  return MessageService;\n})();","map":null,"metadata":{},"sourceType":"module"}