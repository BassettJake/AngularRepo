{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ContactService = /*#__PURE__*/(() => {\n  class ContactService {\n    constructor(http) {\n      this.contactListChangedEvent = new Subject();\n      this.contacts = [];\n      this.contactSelectedEvent = new EventEmitter();\n      this.contactChangedEvent = new EventEmitter();\n      this.http = http;\n      this.maxContactId = this.getMaxId();\n    }\n\n    getContacts() {\n      return new Promise((resolve, reject) => {\n        this.http.get('https://angular-nov21-default-rtdb.firebaseio.com/contacts.json').subscribe( // success method\n        contacts => {\n          this.contacts = contacts;\n          this.maxContactId = this.getMaxId();\n          let sortingCons = this.contacts.slice;\n          this.contacts.sort(function (a, b) {\n            return sortingCons[a.id] - sortingCons[b.id];\n          });\n          this.contactChangedEvent.next(this.contacts.slice());\n          resolve(this.contacts.slice());\n        }, error => {\n          console.log(error.message);\n        });\n      });\n    }\n\n    getContact(id) {\n      return this.contacts.slice()[id];\n    }\n\n    addContact(newContact) {\n      if (newContact == undefined || newContact == null) {\n        return;\n      }\n\n      this.maxContactId++;\n      newContact.id = String(this.maxContactId);\n      this.contacts.push(newContact);\n      this.storeContacts();\n    }\n\n    updateContact(originalContact, newContact) {\n      if (originalContact == undefined || originalContact == null || newContact == undefined || originalContact == null) {\n        return;\n      }\n\n      let pos = this.contacts.indexOf(originalContact);\n\n      if (pos < 0) {\n        return;\n      }\n\n      newContact.id = originalContact.id;\n      this.contacts[pos] = newContact;\n      this.storeContacts();\n    }\n\n    deleteContact(contact) {\n      if (!contact) {\n        return;\n      }\n\n      const pos = this.contacts.indexOf(contact);\n\n      if (pos < 0) {\n        return;\n      }\n\n      this.contacts.splice(pos, 1);\n      this.storeContacts();\n    }\n\n    getMaxId() {\n      let maxId = 0;\n\n      for (let contact in this.contacts) {\n        let currentId = Number(this.contacts[contact].id);\n\n        if (currentId > maxId) {\n          maxId = currentId;\n          break;\n        }\n      }\n\n      return maxId;\n    }\n\n    storeContacts() {\n      let contacts = JSON.stringify(this.contacts);\n      this.http.put('https://angular-nov21-default-rtdb.firebaseio.com/contacts.json', contacts, {\n        headers: new HttpHeaders({\n          \"content-type\": \"application/json\"\n        })\n      }).subscribe(success => {\n        this.contactChangedEvent.emit(success);\n      });\n    }\n\n  }\n\n  ContactService.ɵfac = function ContactService_Factory(t) {\n    return new (t || ContactService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  ContactService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ContactService,\n    factory: ContactService.ɵfac\n  });\n  return ContactService;\n})();","map":null,"metadata":{},"sourceType":"module"}